<?php
/**
 * --------------------------------------------------------
 * Circle Interactive
 * --------------------------------------------------------
 * @author Raymond Angana <raymond@circle-interactive.co.uk>
 * @package Circle Interactive
 * @version 1.0.0
 */

function generate_uuid() {
    // Obtain a random string of 32 hex characters.
    $hex = bin2hex(random_bytes(16));

    // The variable names $time_low, $time_mid, $time_hi_and_version,
    // $clock_seq_hi_and_reserved, $clock_seq_low, and $node correlate to
    // the fields defined in RFC 4122 section 4.1.2.
    //
    // Use characters 0-11 to generate 32-bit $time_low and 16-bit $time_mid.
    $time_low = substr($hex, 0, 8);
    $time_mid = substr($hex, 8, 4);

    // Use characters 12-15 to generate 16-bit $time_hi_and_version.
    // The 4 most significant bits are the version number (0100 == 0x4).
    // We simply skip character 12 from $hex, and concatenate the strings.
    $time_hi_and_version = '4' . substr($hex, 13, 3);

    // Use characters 16-17 to generate 8-bit $clock_seq_hi_and_reserved.
    // The 2 most significant bits are set to one and zero respectively.
    $clock_seq_hi_and_reserved = base_convert(substr($hex, 16, 2), 16, 10);
    $clock_seq_hi_and_reserved &= 0b111111;
    $clock_seq_hi_and_reserved |= 0b10000000;

    // Use characters 18-19 to generate 8-bit $clock_seq_low.
    $clock_seq_low = substr($hex, 18, 2);

    // Use characters 20-31 to generate 48-bit $node.
    $node = substr($hex, 20);

    // Re-combine as a UUID. $clock_seq_hi_and_reserved is still an integer.
    $uuid = sprintf('%s-%s-%s-%02x%s-%s', $time_low, $time_mid, $time_hi_and_version, $clock_seq_hi_and_reserved, $clock_seq_low, $node);
    return $uuid;
}
function migrate_image_blocks_init() {
  $nl = "\r\n";
  $is_migrate = $_SERVER['QUERY_STRING'];
  if ($is_migrate == 'migrate=1') {
    $yml = '';
    $result = db_query('SELECT * FROM {imageblock} ORDER BY info');
    $blocktheme_query = db_query("SELECT value FROM {variable} WHERE name = 'blocktheme'")->fetchObject();
    $blocktheme = unserialize($blocktheme_query->value);
    $d7_d9_block_theme_mapping = [
      'hero-banner-image' => 'hero_banner_image_text_left',
      'hero-banner-image-text-right' => 'hero_banner_image_text_right',
      'hero-banner-video-poster' => 'hero_banner_video_poster_left',
      'hero-banner-video-poster-text-right' => 'hero_banner_video_poster_right',
      'text-with-image-right' => 'text_with_image_right',
      'text-with-image-left' => 'text_with_image_left',
      'two-columns' => 'two_columns',
      'grey-block' => 'grey_block',
      'title-block' => 'title_block',
      'impact-stats-full-width' => 'impact_stats_full_width',
      'impact-stats-half-width' => 'impact_stats_half_width',
      'quote' => 'quote',
    ];
    $blocktypes_with_link_field = [
      'hero_banner_image_text_left',
      'hero_banner_image_text_right',
      'hero_banner_video_poster_left',
      'hero_banner_video_poster_right',
      'text_with_image_left',
      'text_with_image_right',
    ];

    $i = 1;
    foreach ($result as $block) {
      $bid = $block->bid;
      $uri = file_load($block->fid)->uri;
      $url = file_create_url($uri);
      $data = unserialize($block->data);
      $body = str_replace(["\r", "\n"], '', $block->body);
      $img_fname = end(explode('/', $url));
      $img_name = str_replace(['.png', '.jpg', '.jpeg'. '.gif'], '', $img_fname);
      $img_alt = str_replace('"', '\"', $data['imageblock_alt']);
      $blocktheme_id = $blocktheme['imageblock-' . $bid];
      $region = db_query("SELECT region FROM {block} WHERE delta = '{$bid}' AND theme='bootstrap_healthwatch_wib_2018'")->fetchObject();

      if (! is_null($blocktheme_id)) {
        // Copy Image file.
        migrate_copy_img($url, 'hw_contents/images/');
        $uuid = generate_uuid();

        // Debug:
        $blocks[] = [
          'uuid' => $uuid,
          'info' => $block->info,
          'img' => $url,
          'format' => $block->format,
          'blocktheme' => $blocktheme_id,
          'region' => $region->region,
          'data' => $data,
          'body' => $block->body,
        ];
        var_dump($blocks);

        $yml .= "- entity: \"block_content\"$nl";
        $yml .= "  type: \"{$d7_d9_block_theme_mapping[$blocktheme_id]}\"$nl";
        $yml .= "  uuid: \"{$uuid}\"$nl";
        $yml .= "  info: \"{$block->info}\"$nl";
        $yml .= "  status: 1$nl";
        $yml .= "  body:$nl";
        $yml .= "    - format: \"{$block->format}\"$nl";
        $yml .= "      value: |$nl";
        $yml .= "        {$body}$nl";
        $yml .= "  field_region: \"" . $region->region . "\"$nl";
        $yml .= "  field_image:$nl";
        $yml .= "    - entity: \"media\"$nl";
        $yml .= "      bundle: \"image\"$nl";
        $yml .= "      name: \"{$img_name}\"$nl";
        $yml .= "      status: 1$nl";
        $yml .= "      field_media_image:$nl";
        $yml .= "        - '#process':$nl";
        $yml .= "            callback: 'file'$nl";
        $yml .= "            args:$nl";
        $yml .= "              - 'image'$nl";
        $yml .= "              - filename: '{$img_fname}'$nl";
        $yml .= "          alt: \"{$img_alt}\"$nl";

        if (in_array($d7_d9_block_theme_mapping[$blocktheme_id], $blocktypes_with_link_field)
          && isset($data['imageblock_link'])
          && migrate_is_valid_url($data['imageblock_link'])) {
            $yml .= "  field_link:$nl";
            $yml .= "    - uri: 'public://" . ltrim($data['imageblock_link'], '/'). "'$nl";

            $title = $data['imageblock_title'] ?? '';
            $yml .= "      title: \"{$title}\"$nl";

            if ($data['imageblock_link_target'] != '_self') {
              $yml .= "      options:$nl";
              $yml .= "        attributes:$nl";
              $yml .= "          target: '{$data['imageblock_link_target']}'$nl";
            }
        }

        $yml .= $nl;

        $theme = 'bootstrap_hwwib9_2021';
        $prefix = 'bootstrap_healthwatch_wib_2018_block_';
        $config_yaml = [
          'id' => $theme . '_' . $prefix . $i,
          'uuid' => generate_uuid(),
          'block_uuid' => $uuid,
          'label' => $block->info,
          'theme' => $theme,
          'region' => $region->region,
        ];
        var_dump($config_yaml);
        migrate_build_config_yaml('hw_contents/config/sync/', $config_yaml);
        $i++;
      }
    }
    migrate_write_yaml('hw_contents/content/imageblocks.content.yml', $yml);
  }
}

function migrate_is_valid_url($path) {
  if (!drupal_valid_path($path)) {
    // Not a system URL.
    if (!drupal_lookup_path('source', $path))  {
      return FALSE;
    }
    else {
      return TRUE;
    }
  }
}

function migrate_copy_img($url, $base_dir) {
  $filename = end(explode('/', $url));
  $imgpath = $base_dir . $filename;

  if (! empty($filename)) {
    touch($imgpath);
    copy($url, $imgpath);
  }
}

function migrate_write_yaml($path, $content) {
  file_put_contents($path, $content);
}

function migrate_build_config_yaml($path, $config_yaml) {
$yml = "uuid: " . $config_yaml['uuid'] . "
langcode: en
status: true
dependencies:
  content:
    - 'block_content:basic:" . $config_yaml['block_uuid'] . "'
  module:
    - block_class
    - block_content
  theme:
    - " . $config_yaml['theme'] . "
third_party_settings:
  block_class:
    classes: " . $config_yaml['region'] . "
id: " . $config_yaml['id'] . "_image
theme: " . $config_yaml['theme'] . "
region: " . $config_yaml['region'] . "
weight: 0
provider: null
plugin: 'block_content:" . $config_yaml['block_uuid'] . "'
settings:
  id: 'block_content:" . $config_yaml['block_uuid'] . "'
  label: '" . $config_yaml['label'] . "'
  provider: block_content
  label_display: '0'
  status: true
  info: ''
  view_mode: full
visibility: {  }";

  $final_path = $path . 'block.block.' . $config_yaml['id'] . '_image.yml';
  file_put_contents($final_path, $yml);
}
